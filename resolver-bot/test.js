const { ethers } = require("ethers");
require("dotenv").config();

async function testResolverBot() {
    console.log("üß™ Testing Resolver Bot Configuration...\n");

    try {
        // Test environment variables
        console.log("üìã Environment Check:");
        console.log(
            `‚úÖ PRIVATE_KEY: ${
                process.env.PRIVATE_KEY ? "***configured***" : "‚ùå missing"
            }`
        );
        console.log(`‚úÖ RPC_URL: ${process.env.RPC_URL || "‚ùå missing"}`);
        console.log(
            `‚úÖ CONTRACT_ADDRESS: ${
                process.env.CONTRACT_ADDRESS || "‚ùå missing"
            }`
        );
        console.log(
            `‚úÖ BACKEND_URL: ${process.env.BACKEND_URL || "‚ùå missing"}`
        );
        console.log(
            `‚úÖ RAZORPAYX_KEY_ID: ${
                process.env.RAZORPAYX_KEY_ID || "‚ùå missing"
            }`
        );
        console.log(
            `‚úÖ RAZORPAYX_KEY_SECRET: ${
                process.env.RAZORPAYX_KEY_SECRET
                    ? "***configured***"
                    : "‚ùå missing"
            }`
        );
        console.log("");

        // Test blockchain connection
        console.log("üîó Testing Blockchain Connection:");
        const provider = new ethers.JsonRpcProvider(process.env.RPC_URL);
        const network = await provider.getNetwork();
        console.log(
            `‚úÖ Network: ${network.name} (Chain ID: ${network.chainId})`
        );

        // Test wallet
        console.log("\nüí≥ Testing Wallet:");
        const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
        const balance = await provider.getBalance(wallet.address);
        console.log(`‚úÖ Wallet Address: ${wallet.address}`);
        console.log(`‚úÖ Balance: ${ethers.formatEther(balance)} ETH`);

        if (balance === 0n) {
            console.log("‚ö†Ô∏è  Warning: Wallet has zero balance");
        }

        // Test contract connection
        console.log("\nüìù Testing Contract Connection:");
        const fs = require("fs");
        const path = require("path");
        const abiPath = path.join(__dirname, "abi", "OrderProtocol.json");
        const contractABI = JSON.parse(fs.readFileSync(abiPath, "utf8"));

        const contract = new ethers.Contract(
            process.env.CONTRACT_ADDRESS,
            contractABI,
            wallet
        );

        console.log(`‚úÖ Contract Address: ${process.env.CONTRACT_ADDRESS}`);

        // Test if we can read from the contract
        try {
            // This will test if the contract exists and we can interact with it
            const orderCount = await contract.s_orderCount();
            console.log(
                `‚úÖ Contract is accessible - Order Count: ${orderCount}`
            );
        } catch (error) {
            console.log(`‚ùå Contract interaction failed: ${error.message}`);
        }

        // Test RazorpayX configuration
        console.log("\nüí≥ Testing RazorpayX Configuration:");
        if (process.env.RAZORPAYX_KEY_ID && process.env.RAZORPAYX_KEY_SECRET) {
            // Generate auth header like the bot does
            const keyId = process.env.RAZORPAYX_KEY_ID;
            const keySecret = process.env.RAZORPAYX_KEY_SECRET;
            const credentials = `${keyId}:${keySecret}`;
            const base64Credentials =
                Buffer.from(credentials).toString("base64");
            const authHeader = `Basic ${base64Credentials}`;

            console.log(`‚úÖ Key ID: ${keyId}`);
            console.log(
                `‚úÖ Authorization Header: Basic ${base64Credentials.substring(
                    0,
                    20
                )}...`
            );
            console.log(`‚úÖ RazorpayX authentication ready`);
        } else {
            console.log("‚ùå RazorpayX API keys not configured");
        }

        console.log("\nüéâ Resolver Bot Configuration Test Complete!");
        console.log("\nüìä Summary:");
        console.log("- Environment variables: ‚úÖ Configured");
        console.log("- Blockchain connection: ‚úÖ Connected");
        console.log("- Wallet: ‚úÖ Ready");
        console.log("- Contract: ‚úÖ Accessible");
        console.log("- RazorpayX: ‚úÖ Configured");
        console.log("\nüöÄ The resolver bot is ready to accept orders!");
    } catch (error) {
        console.error("\n‚ùå Test failed:", error.message);
        console.log("\nüîß Please check your configuration and try again.");
    }
}

testResolverBot();
